generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique @db.Char(40)
  username         String    @unique @db.Char(40)
  name             String    @db.Char(40)
  password         String    @db.Char(255)
  emailVerified_At DateTime?
  phoneNumber      String?   @db.Char(14)
  photoUrl         String?   @db.Char(300)
  resetPassword    String?   @db.Char(255)
  resetPasswordAt  DateTime?
  createdAt        DateTime  @default(now())
  fairs            Fair[]
  stads            Stand[]
}

model Fair {
  id           String          @id @default(uuid()) @db.Uuid
  name         String          @db.Char(40)
  description  String          @db.VarChar(500)
  emailContact String?         @db.Char(40)
  phoneNumber  String?         @db.Char(14)
  address      String          @db.Char(255)
  dateTime     DateTime?
  lat          String?         @db.Char(15)
  lng          String?         @db.Char(15)
  stars        Int             @default(0) @db.Integer
  type         FairType        @default(ENTREPRENEURSHIP)
  createdAt    DateTime        @default(now())
  photographs  Photograph[]
  user         User            @relation(fields: [userId], references: [id])
  userId       String          @db.Uuid
  stands       StandsOnFairs[]
}

model Photograph {
  id          String   @id @default(uuid()) @db.Uuid
  description String   @db.VarChar(500)
  photoUrl    String?  @db.Char(300)
  isCover     Boolean  @default(false) @db.Boolean
  createdAt   DateTime @default(now())
  fair        Fair     @relation(fields: [fairId], references: [id])
  fairId      String   @db.Uuid
}

model Stand {
  id          String          @id @default(uuid()) @db.Uuid
  name        String          @db.Char(40)
  description String          @db.VarChar(500)
  slogan      String?         @db.VarChar(255)
  stars       Int             @default(0) @db.Integer
  photoUrl    String?         @db.Char(300)
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @db.Uuid
  products    Product[]
  promotions  Promotion[]
  fairs       StandsOnFairs[]
}

model StandsOnFairs {
  fair    Fair   @relation(fields: [fairId], references: [id])
  fairId  String @db.Uuid
  stand   Stand  @relation(fields: [standId], references: [id])
  standId String @db.Uuid

  @@id([fairId, standId])
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.Char(40)
  description String      @db.VarChar(500)
  price       Decimal     @default(0) @db.Decimal()
  stars       Int         @default(0) @db.Integer
  scorers     Int         @default(0) @db.Integer
  type        ProductType
  photoUrl    String?     @db.Char(300)
  isAvailable Boolean     @default(true) @db.Boolean
  createdAt   DateTime    @default(now())
  stand       Stand       @relation(fields: [standId], references: [id])
  standId     String      @db.Uuid
  promotion   Promotion   @relation(references: [id], fields: [promotionId])
  promotionId String      @db.Uuid
}

model Promotion {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.Char(80)
  description String    @db.VarChar(500)
  photoUrl    String?   @db.Char(300)
  isActive    Boolean   @default(true) @db.Boolean
  createdAt   DateTime  @default(now())
  stand       Stand     @relation(fields: [standId], references: [id])
  standId     String    @db.Uuid
  products    Product[]
}

enum FairType {
  ENTREPRENEURSHIP
  GASTRONOMIC
}

enum ProductType {
  CANDY
  FOOD
  CLOTHING
  DRINK
  ACCESSORY
}
